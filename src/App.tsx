import { useEffect, useState, useCallback } from 'react';
import { useElevator } from './hooks/useElevator';
import Building from './components/Building';
import LogTable, { type LogEntry, type SortConfig } from './components/LogTable';
import { BUILDING_CONFIG } from './utils/constants';
import type { Passenger } from './types/elevator';
import styles from './App.module.css';
import { generateLogId } from './utils/helpers';

function App() {
  const [passengerLog, setPassengerLog] = useState<LogEntry[]>([]);
  const [sort, setSort] = useState<SortConfig>({ field: 'order', direction: 'asc' });
  const [autoSpawn, setAutoSpawn] = useState(false);
  const [autoSpawnInterval, setAutoSpawnInterval] = useState(1000); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º—Å
  const [averageTravelTime, setAverageTravelTime] = useState<number>(0);

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ª–æ–≥–∞
  const MAX_LOG_SIZE = 100;

  const handlePassengerArrived = useCallback((passenger: Passenger) => {
    setPassengerLog((prev) => {
      const newEntry = {
        id: generateLogId(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
        passengerId: passenger.id, // ID –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        from: passenger.currentFloor,
        to: passenger.targetFloor,
        travelTime: passenger.travelTime || 0,
        order: prev.length,
        createdAt: passenger.createdAt, // –ò—Å–ø–æ–ª—å–∑—É–µ–º createdAt –ø–∞—Å—Å–∞–∂–∏—Ä–∞
      };

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–æ–≥
      const newLog =
        prev.length >= MAX_LOG_SIZE ? [...prev.slice(1), newEntry] : [...prev, newEntry];

      console.log('handlePassengerArrived', newLog, newEntry);
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –µ—Å–ª–∏ –ª–æ–≥ –∑–∞–ø–æ–ª–Ω–µ–Ω
      if (newLog.length === MAX_LOG_SIZE) {
        const avgTime = Math.round(
          newLog.reduce((sum, entry) => sum + entry.travelTime, 0) / newLog.length,
        );
        setAverageTravelTime(avgTime);
      }

      return newLog;
    });
  }, []);

  const { building, callElevator, isRunning, setIsRunning, toggleElevator } =
    useElevator(handlePassengerArrived);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
  useEffect(() => {
    const root = document.documentElement;
    root.style.setProperty('--total-floors', BUILDING_CONFIG.TOTAL_FLOORS.toString());
    root.style.setProperty('--floor-height', `${BUILDING_CONFIG.FLOOR_HEIGHT}px`);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞
  const spawnRandomPassenger = useCallback(() => {
    const randomFloor = Math.floor(Math.random() * BUILDING_CONFIG.TOTAL_FLOORS) + 1;
    callElevator(randomFloor);
  }, [callElevator]);

  // –ê–≤—Ç–æ—Å–ø–∞–≤–Ω –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
  useEffect(() => {
    if (!autoSpawn) return;

    const interval = setInterval(() => {
      spawnRandomPassenger();
    }, autoSpawnInterval);

    return () => clearInterval(interval);
  }, [autoSpawn, autoSpawnInterval, spawnRandomPassenger]);

  return (
    <div className={styles.appLayout}>
      <div className={styles.logTableContainer}>
        <div className={styles.instructions}>
          <div className={styles.controls}>
            <button
              onClick={() => {
                setIsRunning(!isRunning);
                if (!isRunning) {
                  setAutoSpawn(false);
                }
              }}
              className={styles.controlButton}
            >
              {isRunning ? '‚è∏Ô∏è –ü–∞—É–∑–∞' : '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}
            </button>
            <button onClick={spawnRandomPassenger} className={styles.controlButton}>
              üé≤ –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞
            </button>
            <button
              onClick={() => setAutoSpawn(!autoSpawn)}
              className={`${styles.controlButton} ${autoSpawn ? styles.active : ''}`}
            >
              {autoSpawn ? 'üîÑ –ê–≤—Ç–æ –í–ö–õ' : '‚èπÔ∏è –ê–≤—Ç–æ –í–´–ö–õ'}
            </button>
            {autoSpawn && (
              <select
                value={autoSpawnInterval}
                onChange={(e) => setAutoSpawnInterval(Number(e.target.value))}
                className={styles.selectControl}
              >
                <option value={500}>‚ö° –ë—ã—Å—Ç—Ä–æ (0.5—Å)</option>
                <option value={1000}>üö∂ –û–±—ã—á–Ω–æ (1—Å)</option>
                <option value={2000}>üêå –ú–µ–¥–ª–µ–Ω–Ω–æ (2—Å)</option>
                <option value={3000}>ü¶• –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ (3—Å)</option>
              </select>
            )}
            <button
              onClick={() => {
                setPassengerLog([]);
                setAverageTravelTime(0);
              }}
              className={styles.controlButton}
              title="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥"
            >
              üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥
            </button>
            <button
              onClick={() => toggleElevator('elevator-1')}
              className={`${styles.controlButton} ${!building.elevators[0].isEnabled ? styles.disabled : ''}`}
              title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ª–∏—Ñ—Ç 1"
            >
              {building.elevators[0].isEnabled ? '‚ö° –õ–∏—Ñ—Ç 1 –í–ö–õ' : 'üö´ –õ–∏—Ñ—Ç 1 –í–´–ö–õ'}
            </button>
            <button
              onClick={() => toggleElevator('elevator-2')}
              className={`${styles.controlButton} ${!building.elevators[1].isEnabled ? styles.disabled : ''}`}
              title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ª–∏—Ñ—Ç 2"
            >
              {building.elevators[1].isEnabled ? '‚ö° –õ–∏—Ñ—Ç 2 –í–ö–õ' : 'üö´ –õ–∏—Ñ—Ç 2 –í–´–ö–õ'}
            </button>
          </div>
          <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</h3>
          <p>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ‚ûï –Ω–∞ —ç—Ç–∞–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞</p>
          <p>‚Ä¢ –õ–∏—Ñ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∏ —Ä–∞–∑–≤–æ–∑–∏—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤</p>
          <p>‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ –Ω–∞ —ç—Ç–∞–∂–µ, 5 –≤ –ª–∏—Ñ—Ç–µ</p>
          <p>‚Ä¢ –õ–æ–≥ —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</p>
          <p>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã</p>

          <h4>–ê–ª–≥–æ—Ä–∏—Ç–º –ª–∏—Ñ—Ç–∞:</h4>
          <p>
            ‚Ä¢ <strong>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</strong> –õ–∏—Ñ—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–ª—å –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
          </p>
          <p>
            ‚Ä¢ <strong>–ü–æ–ø—É—Ç—á–∏–∫–∏:</strong> –ü–æ–¥–±–∏—Ä–∞–µ—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤, –∏–¥—É—â–∏—Ö –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
          </p>
          <p>
            ‚Ä¢ <strong>–û—á–µ—Ä–µ–¥–∏:</strong> –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–æ–∑–∏—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤, –ø–æ—Ç–æ–º –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—ã–∑–æ–≤—ã
          </p>
          <p>
            ‚Ä¢ <strong>–°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</strong> –ö–æ–≥–¥–∞ —Ü–µ–ª–∏ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
          </p>
        </div>
        <div className={styles.logStats}>
          <span>üìä –õ–æ–≥: {passengerLog.length} –∑–∞–ø–∏—Å–µ–π</span>
          {averageTravelTime > 0 && <span>‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {averageTravelTime}—Å</span>}
        </div>
        <LogTable log={passengerLog} sort={sort} setSort={setSort} />
      </div>
      <Building building={building} onCallElevator={callElevator} />
    </div>
  );
}

export default App;
